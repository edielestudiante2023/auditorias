<?php
/**
 * Script de Verificaci√≥n del Servidor
 * Ejecuta este script en el servidor para verificar que todo est√© configurado correctamente
 *
 * Uso: php check-server.php
 * O visita: https://tudominio.com/check-server.php
 *
 * IMPORTANTE: ELIMINA ESTE ARCHIVO DESPU√âS DE VERIFICAR (por seguridad)
 */

echo "===========================================\n";
echo "VERIFICACI√ìN DEL SERVIDOR - Cycloid Auditor√≠as\n";
echo "===========================================\n\n";

$errors = [];
$warnings = [];
$success = [];

// 1. Versi√≥n de PHP
echo "üìå Verificando versi√≥n de PHP...\n";
$phpVersion = phpversion();
echo "   Versi√≥n actual: PHP $phpVersion\n";
if (version_compare($phpVersion, '8.1.0', '>=')) {
    $success[] = "‚úÖ Versi√≥n de PHP correcta ($phpVersion)";
} else {
    $errors[] = "‚ùå Versi√≥n de PHP muy antigua ($phpVersion). Se requiere PHP 8.1+";
}
echo "\n";

// 2. Extensi√≥n fileinfo
echo "üìå Verificando extensi√≥n fileinfo...\n";
if (extension_loaded('fileinfo')) {
    $success[] = "‚úÖ Extensi√≥n fileinfo est√° habilitada";
    echo "   Estado: HABILITADA ‚úì\n";
} else {
    $warnings[] = "‚ö†Ô∏è Extensi√≥n fileinfo NO est√° habilitada (el sistema funcionar√° pero con menor seguridad)";
    echo "   Estado: DESHABILITADA ‚ö†Ô∏è\n";
    echo "   Soluci√≥n: sudo apt-get install php-fileinfo && sudo systemctl restart apache2\n";
}
echo "\n";

// 3. L√≠mites de subida
echo "üìå Verificando l√≠mites de subida de archivos...\n";
$uploadMaxSize = ini_get('upload_max_filesize');
$postMaxSize = ini_get('post_max_size');
$memoryLimit = ini_get('memory_limit');
echo "   upload_max_filesize: $uploadMaxSize\n";
echo "   post_max_size: $postMaxSize\n";
echo "   memory_limit: $memoryLimit\n";

if (intval($uploadMaxSize) >= 10 && intval($postMaxSize) >= 10) {
    $success[] = "‚úÖ L√≠mites de subida correctos";
} else {
    $warnings[] = "‚ö†Ô∏è L√≠mites de subida peque√±os. Recomendado: 10M o m√°s";
}
echo "\n";

// 4. Extensiones requeridas
echo "üìå Verificando extensiones de PHP requeridas...\n";
$requiredExtensions = [
    'mysqli' => 'Base de datos MySQL',
    'mbstring' => 'Manejo de strings multibyte',
    'json' => 'Procesamiento JSON',
    'curl' => 'Conexiones HTTP (SendGrid)',
    'intl' => 'Internacionalizaci√≥n',
    'gd' => 'Procesamiento de im√°genes'
];

foreach ($requiredExtensions as $ext => $description) {
    if (extension_loaded($ext)) {
        echo "   ‚úì $ext ($description)\n";
        $success[] = "‚úÖ Extensi√≥n $ext habilitada";
    } else {
        echo "   ‚úó $ext ($description) - NO DISPONIBLE\n";
        $errors[] = "‚ùå Extensi√≥n $ext NO est√° habilitada";
    }
}
echo "\n";

// 5. Permisos de directorios
echo "üìå Verificando permisos de escritura...\n";
$writableDirs = [
    'writable/logs',
    'writable/session',
    'writable/cache',
    'writable/uploads',
    'writable/uploads/firmas',
    'writable/uploads/logos',
    'writable/uploads/soportes',
    'writable/uploads/evidencias',
    'writable/uploads/pdf'
];

foreach ($writableDirs as $dir) {
    $fullPath = __DIR__ . '/' . $dir;
    if (is_dir($fullPath)) {
        if (is_writable($fullPath)) {
            echo "   ‚úì $dir (escribible)\n";
        } else {
            echo "   ‚úó $dir (NO escribible)\n";
            $errors[] = "‚ùå Directorio $dir no tiene permisos de escritura";
        }
    } else {
        echo "   ? $dir (no existe)\n";
        $warnings[] = "‚ö†Ô∏è Directorio $dir no existe";
    }
}
echo "\n";

// 6. Archivo .env
echo "üìå Verificando archivo .env...\n";
$envFile = __DIR__ . '/.env';
if (file_exists($envFile)) {
    $success[] = "‚úÖ Archivo .env existe";
    echo "   Estado: EXISTE ‚úì\n";

    // Verificar configuraciones importantes
    $envContent = file_get_contents($envFile);

    if (strpos($envContent, 'app.baseURL') !== false) {
        echo "   ‚úì app.baseURL est√° configurado\n";
    } else {
        $warnings[] = "‚ö†Ô∏è app.baseURL no est√° configurado en .env";
    }

    if (strpos($envContent, 'database.default.hostname') !== false) {
        echo "   ‚úì Configuraci√≥n de base de datos presente\n";
    } else {
        $warnings[] = "‚ö†Ô∏è Configuraci√≥n de base de datos no encontrada";
    }

    if (strpos($envContent, 'sendgrid.apiKey') !== false) {
        echo "   ‚úì SendGrid API Key configurado\n";
    } else {
        $warnings[] = "‚ö†Ô∏è SendGrid API Key no configurado";
    }
} else {
    $errors[] = "‚ùå Archivo .env NO existe";
    echo "   Estado: NO EXISTE ‚ùå\n";
    echo "   Soluci√≥n: Copiar .env.production.example como .env\n";
}
echo "\n";

// 7. Funciones requeridas
echo "üìå Verificando funciones de PHP...\n";
$requiredFunctions = [
    'finfo_open' => 'Detecci√≥n de tipo MIME (opcional)',
    'password_hash' => 'Hashing de contrase√±as',
    'mail' => 'Env√≠o de emails (opcional con SendGrid)'
];

foreach ($requiredFunctions as $func => $description) {
    if (function_exists($func)) {
        echo "   ‚úì $func() - $description\n";
    } else {
        echo "   ‚úó $func() - $description - NO DISPONIBLE\n";
        if ($func === 'finfo_open') {
            $warnings[] = "‚ö†Ô∏è Funci√≥n $func no disponible (el sistema tiene fallback)";
        } else {
            $warnings[] = "‚ö†Ô∏è Funci√≥n $func no disponible";
        }
    }
}
echo "\n";

// 8. Resumen
echo "===========================================\n";
echo "RESUMEN DE LA VERIFICACI√ìN\n";
echo "===========================================\n\n";

if (count($errors) === 0 && count($warnings) === 0) {
    echo "üéâ ¬°TODO PERFECTO! El servidor est√° correctamente configurado.\n\n";
} else {
    if (count($errors) > 0) {
        echo "‚ùå ERRORES CR√çTICOS (" . count($errors) . "):\n";
        foreach ($errors as $error) {
            echo "   $error\n";
        }
        echo "\n";
    }

    if (count($warnings) > 0) {
        echo "‚ö†Ô∏è ADVERTENCIAS (" . count($warnings) . "):\n";
        foreach ($warnings as $warning) {
            echo "   $warning\n";
        }
        echo "\n";
    }
}

if (count($success) > 0) {
    echo "‚úÖ CONFIGURACIONES CORRECTAS (" . count($success) . "):\n";
    foreach ($success as $item) {
        echo "   $item\n";
    }
    echo "\n";
}

// 9. Acciones recomendadas
if (count($errors) > 0 || count($warnings) > 0) {
    echo "===========================================\n";
    echo "ACCIONES RECOMENDADAS\n";
    echo "===========================================\n\n";

    if (!extension_loaded('fileinfo')) {
        echo "1. Habilitar extensi√≥n fileinfo:\n";
        echo "   sudo apt-get install php-fileinfo\n";
        echo "   sudo systemctl restart apache2\n\n";
    }

    if (count($errors) > 0) {
        echo "2. Revisar la documentaci√≥n en TROUBLESHOOTING.md\n";
        echo "3. Verificar permisos de carpetas:\n";
        echo "   sudo chown -R www-data:www-data writable/\n";
        echo "   sudo chmod -R 775 writable/\n\n";
    }
}

echo "===========================================\n";
echo "‚ö†Ô∏è IMPORTANTE: ELIMINA ESTE ARCHIVO check-server.php\n";
echo "   despu√©s de la verificaci√≥n por seguridad.\n";
echo "===========================================\n";

// Si se ejecuta desde el navegador, mostrar en HTML
if (php_sapi_name() !== 'cli') {
    echo "\n\n<!-- Para mejor visualizaci√≥n, ejecuta: php check-server.php -->";
}
?>